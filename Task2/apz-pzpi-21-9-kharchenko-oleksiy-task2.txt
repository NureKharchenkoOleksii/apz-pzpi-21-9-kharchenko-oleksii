2	КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ ПРЕДМЕТНОЇ ОБЛАСТІ

Перед розробкою серверної частини програмної системи організації роботи торгового центру, необхідно чітко описати всі сутності, які будуть потрібні для реалізації визначеного функціоналу. Для цього була розроблена ER-модель даних, яка візуалізує всі сутності та зв'язки між ними. Після визначення всіх необхідних сутностей, була створена ER-модель даних (див. рис. Б.1 у додатку Б).
Модель даних включає в себе наступні сутності та поля для них:
а) магазин:
1)	id;
2)	назва;
3)	категорія;
4)	розташування;
5)	контактна особа;
6)	номер телефону;
7)	email; 
8)	години роботи (відкриття, закриття);
      в) співробітник:
1)	id;
2)	ім'я;
3)	прізвище;
4)	посада;
5)	id_магазину;
6)	контактний номер;
7)	email;
8)	дата прийняття на роботу;
9)	пароль;
      г) товар:
1)	id;
2)	назва;
3)	опис;
4)	ціна;
5)	категорія;
6)	id_магазину;
7)	кількість на складі;
      ґ) клієнт:
1)	id;
2)	ім'я;
3)	прізвище;
4)	email;
5)	номер телефону;
6)	бали лояльності;
7)	пароль;
      д) замовлення:
1)	id;
2)	id_клієнта;
3)	id_магазину;
4)	список товарів (id товару, кількість, ціна);
5)	загальна сума;
6)	дата замовлення;
7)	статус;
      е) акція:
1)	id;
2)	назва;
3)	опис;
4)	дата початку;
5)	дата завершення;
6)	відсоток знижки;
7)	список магазинів, де діє акція;
      в) оренда:
1)	id;
2)	id_магазину;
3)	дата початку;
4)	дата завершення;
5)	щомісячна плата;
6)	статус;
      в) паркування:
1)	id;
2)	номер місця;
3)	статус зайнятості;
4)	номер транспортного засобу;
5)	час в'їзду;
6)	час виїзду;
      ґ) адміністратор:
1)	id;
2)	ім'я;
3)	прізвище;
4)	email;
5)	пароль;
6)	роль;
7)	дата створення;
8)	дата останньої авторизації.
Усі сутності містять поля, необхідні для правильної реалізації функціоналу системи. Після визначення всіх об'єктів потрібно перейти до визначення основних сценаріїв використання програмної системи. Найкраще для цього підходить UML-діаграма прецедентів. На основі аналізу функціоналу, описаного в документі «Vision & Scope», було створено UML-діаграму прецедентів (див. рис. Б.2 у додатку Б), де визначено чотирьох акторів: співробітник, клієнт, адміністратор та датчик. 
Всі актори отримали весь раніше визначений функціонал. Клієнт може змінювати особисту інформацію, переглядати історію своїх замовлень, додавати товари до кошика та здійснювати покупки.
Співробітник магазину може керувати асортиментом товарів, їх категоріями, цінами та кількістю на складі. Він має змогу формувати звітність по продажах, що дає змогу керівництву мати всю інформацію про популярність товарів та ефективність роботи магазину.
Адміністратор торгового центру може змінювати будь-які дані в базі даних та отримувати необхідну інформацію. Він має доступ до функціоналу, котрий є у клієнта та співробітника магазину, а також може керувати орендою приміщень, паркуванням та акціями.
Важливим компонентом системи є електронні цінники, які можуть бути прикріплені до товарів і відображати актуальні ціни та знижки в реальному часі, синхронізуючись з базою даних. 
У результаті концептуального моделювання предметної області було розроблено ER-діаграму та визначені основні сутності програмної системи, такі як магазини, співробітники, товари, клієнти, замовлення, акції, оренда та паркування. Тепер можна перейти до реалізації інженерних рішень, включаючи розробку серверної частини, клієнтського інтерфейсу та інтеграцію з електронними цінниками та системою управління паркуванням.

3	ІНЖЕНЕРНІ РІШЕННЯ
3.1	Структура та технології проекту

Технології для написання серверної частини були обрані виходячи з функціональних потреб системи та з особистого досвіду. Для розробки серверної частини була обрана платформа Node.js з використанням фреймворку Express.js. Специфікація REST орієнтована на використання архітектурного стилю, який підкреслює використання ресурсів та їх ідентифікацію за допомогою URI. В Express.js були використані маршрути та middleware для створення RESTful веб-сервісів, які взаємодіють за принципами архітектурного стилю REST.
         У якості бази даних була використана MongoDB, оскільки вона надає гнучкість та ефективність у роботі з документами та має високу надійність. MongoDB дозволяє легко масштабувати систему, пристосовуючись до зростання обсягу даних та забезпечуючи швидкий доступ до інформації. Серверна частина взаємодіє з базою даних завдяки Mongoose, ODM (Object Data Modeling) бібліотеці для MongoDB та Node.js.
Спілкування між сервером та клієнтською частиною реалізоване за допомогою REST API. Такий самий тип спілкування застосований і для мобільного додатку, і для системи електронних цінників. Більш детально розглянути взаємодію серверної частини з іншими елементами системи можна на UML діаграмі розгортання (див. рис. 3.1). 
Надходження даних від електронних цінників теж реалізоване завдяки REST API. Для кращого розуміння взаємодії електронних цінників з серверною частиною, була розроблена UML діаграма діяльності. Алгоритм має циклічний характер і починається з очікування оновлення цін. Далі йде перевірка на зміну ціни товару і відправка PUT-запиту з новою ціною до серверної частини. Після отримання запиту серверною частиною, відбувається оновлення ціни в базі даних. Якщо ціна змінилася, то відбувається оновлення відображення на електронному ціннику. З таким підходом можна досягти оновлення цін в реальному часі.
Рисунок 3.2 – UML діаграма діяльності.
Розглядаючи структуру серверної частини, варто відзначити, що вона складається з 2 взаємопов’язаних частин 
Кожна частина відповідає за певний функціонал:
-	Частина models містить схеми та моделі MongoDB для різних сутностей системи (магазини, товари, замовлення тощо). Ці моделі визначають структуру даних та забезпечують взаємодію з базою даних.
-	Частина routes містить файли з маршрутами для різних ресурсів API. Кожен файл відповідає за обробку HTTP-запитів для певної сутності (наприклад, shopRoutes.js, orderRoutes.js тощо). Ці маршрути визначають, як сервер реагує на різні типи запитів (GET, POST, PUT, DELETE) для кожного ресурсу.
Така структура дозволяє ефективно організувати код, забезпечити
      модульність та полегшити подальшу розробку та підтримку системи.

3.2	Специфікація REST API

Специфікація REST API наведена в таблиці 1 нижче.
Таблиця 1 – Специфікація REST API серверної частини системи

3.3	Реалізація моделі співробітника

Була розроблена модель Employee (див. рядок 1-10, розділ А.1 у додатку А), яка відповідає за зберігання інформації про співробітників магазинів. Ця модель містить такі поля: firstName, lastName, position, shopId, contactNumber, email, hireDate та password. Ці поля дозволяють нам зберігати інформацію про ім'я та прізвище співробітника, його посаду, магазин, в якому він працює, контактний номер, електронну пошту, дату прийняття на роботу та пароль.

3.4	Реалізація моделі магазину

У рамках нашого проекту "Програмна система організації роботи торгового центру" була розроблена модель магазину, яка відповідає за зберігання інформації про магазини в нашій системі. Модель Shop (див. рядок 1-12, розділ А.2 у додатку А) містить такі поля: name, category, location, contactPerson, phoneNumber, email та openingHours. Ці поля дозволяють нам зберігати основну інформацію про магазин, включаючи його назву, категорію, місцезнаходження, контактну особу, номер телефону, електронну пошту та години роботи.

3.5	Реалізація моделі товару

У контексті нашого проекту ми створили модель Product (див. рядок 1-8, розділ А.3 у додатку А), яка слугує для збереження даних про товари. Модель включає такі поля: name, description, price, category, shopId та stock. Ці поля дозволяють нам зберігати важливу інформацію про кожний товар, включаючи його назву, опис, ціну, категорію, магазин, до якого він належить, та кількість на складі.

3.6	Реалізація моделі акції

Для управління акціями та знижками ми створили модель Promotion (див. рядок 1-8, розділ А.4 у додатку А). Вона містить поля: name, description, startDate, endDate, discountPercentage та applicableShops. Ця модель дозволяє нам ефективно керувати різними акціями в торговому центрі.